# npm install 후

$ node -v (버전확인)

    # npm의 목적 은 간단히 말해 설치된 패키지 관리입니다. 
    ‘패키지’는 완전한 애플리케이션일 수도 있고, 코드 샘플일 수도 있고, 
    프로젝트에서 사용할 모듈 또는 라이브러리일 수도 있습니다.
    npm은 패키지를 설치할때 전역으로 globally, 또는 로컬로 locally
    설치할 수 있습니다.
    전역으로설 치하는 패키지는 보통 개발 과정에서 사용하는, 
    터미널에서 실행하는 도구들입니다. 
    로컬 패키 지는 각 프로젝트에 종속되는 패키지입니다. 
    패키지를 설치할 때는 npm install 명령어를 사 용합니다. 
    인기 있는 패키지 언더스코어 Underscore 를 설치하면서 
    어떻게 동작하는지 알아봅시다.

$ npm install underscore
$ npm install underscore@1.8.0 (특정 버전을 설치하고 싶을 때)

    # npm은 package.json 파일을 통해 의존성을 관리합니다.
    package.json을 직접 만들 필요는 없습니다. npm init으로 설정하면 됩니다

$ npm init

    # 지금부터는 로컬 패키지를 설치할 때 --save 또는 --save-dev 플래그를 사용합니다. 
    이 플래그를 쓰지 않아도 패키지가 설치되긴 하지만, package.json 파일에는 등록되지 않습니다.

$ npm install --save underscore

    # 이렇게 입력하면 오류가 발생하는데, 지금은 무시해도 된다.
    이제 package.json 을 보면 의존성 리스트에 underscore 가 생기는데
    이제 패키지이름을 쓰지 않고 npm install 을 입력하면 package.json 을 읽고
    필요한 패키지를 자동으로 설치한다

$ npm install

    # 개발 과정에서 피할 수 없는 반복 작업을 자동화하는 빌드 도구가 필요합니다. 
    현재 자바 스크립트에서 가장 널리 쓰이는 빌드 도구는 
    그런트Grunt (http://gruntjs.com/ )와 
    걸프 Gulp (http://gulpjs.com/)입니다. 
    이 둘은 모두 훌륭한 빌드 시스템입니다.
    먼저 걸프를 전역으로 설치해봅시다.

$ npm install -g gulp (관리자권한이 필요할땐 sudo를 사용하자)

    그리고 프로젝 트마다 로컬 걸프가 필요하므로, 
    프로젝트 루트에서 npm install --save-dev gulp 명령을 실행합니다.

$ npm install --save-dev gulp

    # 이제 gulpfile.js 를 작성하자
    할일을 지정하지 않아도 성공적으로 설치됐는지 확인해볼 수 있다

$ gulp

===========================

    # 트랜스 컴파일러

$ npm install --save-dev babel-preset-es2015

===========================

    # 바벨을 걸프와 함께 사용하기
    우리가 작성할 ES6 코드를 ES5 코드로 바꿀 수 있다

$ npm install --save-dev gulp-babel